const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const cors = require('cors'); // Import cors

const BOT_TOKEN = '7927459052:AAGXlfBCaNTA0BudGBogp6ciUSdbcnCYMLY';

// Use polling (easiest for testing, works without a public server)
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// ðŸ”¹ Store chat IDs (in-memory for now; replace with a database for persistence)
const userChatIds = new Set();

// ðŸ”¹ On /start, get user ID and send welcome
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;

    console.log(`New user started bot: ${username || 'Unknown'} (Chat ID: ${chatId})`); // Log new user and chat ID

    // âœ… Save chatId to the in-memory set
    userChatIds.add(chatId);

    // âœ… Send a welcome message
    await bot.sendMessage(chatId, `ðŸ‘‹ Hello @${username || 'friend'}! Youâ€™ll now get updates from me.`);
});

// ðŸ”¹ Function to send a message with optional image
const sendTelegramMessage = async (chatId, text, imageUrl) => {
    try {
        if (imageUrl) {
            const response = await bot.sendPhoto(chatId, imageUrl, { caption: text });
            console.log(`Photo sent to chat ID ${chatId}:`, response);
            return response.message_id; // Return the message ID
        } else {
            const response = await bot.sendMessage(chatId, text);
            console.log(`Message sent to chat ID ${chatId}:`, response);
            return response.message_id; // Return the message ID
        }
    } catch (error) {
        console.error(`Error sending message to chat ID ${chatId}:`, error.response?.data || error.message);
        throw error;
    }
};

// ðŸ”¹ Function to broadcast a message to all users
const broadcastMessage = async (text) => {
    console.log(`Broadcasting message: "${text}" to ${userChatIds.size} users`); // Log the number of users
    for (const chatId of userChatIds) {
        console.log(`Attempting to send message to chat ID: ${chatId}`); // Log each chat ID
        try {
            await sendTelegramMessage(chatId, text);
            console.log(`Message sent successfully to chat ID: ${chatId}`);
        } catch (error) {
            console.error(`Failed to send message to ${chatId}:`, error.response?.data || error.message);
        }
    }
};

// Example: Send a message after 10 seconds to the user
// Replace this with your actual logic (database, trigger, etc.)

// ðŸ”¹ Express server setup
const app = express();
app.use(cors()); // Enable CORS
app.use(express.json());

// Endpoint to broadcast messages
app.post('/api/broadcast', async (req, res) => {
    const { message } = req.body;
    if (!message) {
        return res.status(400).send('Message is required');
    }
    try {
        await broadcastMessage(message);
        res.send('Message broadcasted successfully');
    } catch (error) {
        console.error('Failed to broadcast message:', error.message);
        res.status(500).send('Failed to broadcast message');
    }
});

// Endpoint to send a message to a specific user
app.post('/api/sendToUser', async (req, res) => {
    const { chatId, message, imageUrl } = req.body;
    if (!chatId || !message) {
        return res.status(400).send('Chat ID and message are required');
    }
    try {
        const messageId = await sendTelegramMessage(chatId, message, imageUrl);
        res.send({ messageId }); // Return the message ID
    } catch (error) {
        console.error(`Failed to send message to user with Chat ID ${chatId}:`, error.message);
        res.status(500).send('Failed to send message to user');
    }
});

// Endpoint to delete a message
app.post('/api/deleteMessage', async (req, res) => {
    const { chatId, messageId } = req.body;
    if (!chatId || !messageId) {
        return res.status(400).send('Chat ID and message ID are required');
    }
    try {
        await bot.deleteMessage(chatId, messageId);
        res.send('Message deleted successfully');
    } catch (error) {
        console.error(`Failed to delete message with ID ${messageId} for chat ID ${chatId}:`, error.message);
        res.status(500).send('Failed to delete message');
    }
});

// Start the Express server
app.listen(3000, () => {
    console.log('Server is running on http://localhost:3000');
});
